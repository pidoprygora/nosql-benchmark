from benchmark import run_benchmark
from visualization import visualize_results
from advanced_visualization import visualize_pro, visualize_workload
from benchmark_advanced import run_benchmark_pro, run_workload_benchmarks
from benchmark_new import run_benchmark as run_new_benchmark
import argparse

def run_all_benchmarks():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
    run_benchmark_pro()  # –ó–≤–∏—á–∞–π–Ω–∏–π –±–µ–Ω—á–º–∞—Ä–∫
    run_workload_benchmarks()  # –ë–µ–Ω—á–º–∞—Ä–∫ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—è–º–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    
    print("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π...")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    visualize_pro()  # –ì—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫—É
    visualize_workload()  # –ì—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    
    print("\n‚úÖ –í—Å—ñ –±–µ–Ω—á–º–∞—Ä–∫–∏ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def run_single_benchmark(db_name, scenario_name, num_docs):
    """–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫—É –∑ –Ω–æ–≤–∏–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫—É –¥–ª—è {db_name} –∑—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—î–º {scenario_name}...")
    results = run_new_benchmark(db_name, scenario_name, num_docs)
    print("\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return results

def main():
    parser = argparse.ArgumentParser(description='NoSQL Database Benchmark Suite')
    parser.add_argument('--mode', choices=['all', 'single'], default='all',
                      help='–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏: all - –≤—Å—ñ –±–µ–Ω—á–º–∞—Ä–∫–∏, single - –æ–¥–∏–Ω–æ—á–Ω–∏–π –±–µ–Ω—á–º–∞—Ä–∫')
    parser.add_argument('--db', choices=['mongodb', 'arangodb', 'couchbase'],
                      help='–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º—É single)')
    parser.add_argument('--scenario', 
                      choices=['read_heavy', 'balanced', 'write_heavy', 'read_only', 'write_only'],
                      help='–°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º—É single)')
    parser.add_argument('--docs', type=int, default=1000,
                      help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º—É single)')
    
    args = parser.parse_args()
    
    if args.mode == 'all':
        run_all_benchmarks()
    else:
        if not args.db or not args.scenario:
            parser.error("–î–ª—è —Ä–µ–∂–∏–º—É single –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --db —Ç–∞ --scenario")
        run_single_benchmark(args.db, args.scenario, args.docs)

if __name__ == "__main__":
    main()

import pandas as pd
import matplotlib.pyplot as plt

def visualize_pro(csv_file="benchmark_pro_results.csv"):
    print("üìä Visualizing PRO benchmark results...")
    df = pd.read_csv(csv_file, encoding='utf-8')

    databases = df["Database"].unique()
    doc_sizes = sorted(df["Documents"].unique())

    # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Insert Time
    insert_data = {db: [] for db in databases}
    for db in databases:
        for size in doc_sizes:
            time_value = df[(df["Database"] == db) & (df["Documents"] == size)]["Insert Time (s)"].values[0]
            insert_data[db].append(time_value)

    # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Read Time
    read_data = {db: [] for db in databases}
    for db in databases:
        for size in doc_sizes:
            time_value = df[(df["Database"] == db) & (df["Documents"] == size)]["Read Time (s)"].values[0]
            read_data[db].append(time_value)

    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –±–∞–∑
    colors = ["#4CAF50", "#2196F3", "#FFC107", "#F44336"]

    # INSERT TIME
    plt.figure(figsize=(10, 6))
    for idx, db in enumerate(databases):
        plt.bar(
            [x + idx * 0.2 for x in range(len(doc_sizes))],  # –∑—Å—É–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –±–∞–∑–∏
            insert_data[db],
            width=0.2,
            label=db,
            color=colors[idx % len(colors)]
        )
    plt.title("Insert Time per Database (Linear Scale)")
    plt.xlabel("Number of Documents")
    plt.ylabel("Total Insert Time (s)")
    plt.xticks([r + 0.3 for r in range(len(doc_sizes))], doc_sizes)
    plt.legend()
    plt.grid(axis="y", linestyle="--", linewidth=0.5)
    plt.tight_layout()
    plt.savefig("insert_time_pro.png")
    plt.close()

    # READ TIME
    plt.figure(figsize=(10, 6))
    for idx, db in enumerate(databases):
        plt.bar(
            [x + idx * 0.2 for x in range(len(doc_sizes))],
            read_data[db],
            width=0.2,
            label=db,
            color=colors[idx % len(colors)]
        )
    plt.title("Read Time per Database (Linear Scale)")
    plt.xlabel("Number of Documents")
    plt.ylabel("Total Read Time (s)")
    plt.xticks([r + 0.3 for r in range(len(doc_sizes))], doc_sizes)
    plt.legend()
    plt.grid(axis="y", linestyle="--", linewidth=0.5)
    plt.tight_layout()
    plt.savefig("read_time_pro.png")
    plt.close()

    print("‚úÖ Visualization complete. Images saved: insert_time_pro.png, read_time_pro.png")

def visualize_workload(csv_file="benchmark_workload_results.csv"):
    print("üìä Visualizing workload benchmark results...")
    df = pd.read_csv(csv_file, encoding='utf-8')
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –±–∞–∑ –¥–∞–Ω–∏—Ö
    colors = ["#4CAF50", "#2196F3", "#FFC107", "#F44336"]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é
    scenarios = df["Scenario"].unique()
    doc_sizes = sorted(df["Documents"].unique())
    
    for scenario in scenarios:
        scenario_data = df[df["Scenario"] == scenario]
        
        # 1. –ì—Ä–∞—Ñ—ñ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
        plt.figure(figsize=(12, 6))
        for idx, db in enumerate(scenario_data["Database"].unique()):
            db_data = scenario_data[scenario_data["Database"] == db]
            db_data = db_data.sort_values("Documents")
            plt.plot(
                db_data["Documents"],
                db_data["Avg Operation Latency (s)"],
                marker='o',
                label=db,
                color=colors[idx % len(colors)],
                linewidth=2
            )
        plt.title(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é: {scenario}")
        plt.xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
        plt.ylabel("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (—Å–µ–∫—É–Ω–¥–∏)")
        plt.xscale('log', base=2)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()
        plt.tight_layout()
        filename = f'benchmark_{scenario.lower().replace(" ", "_")}_avg_latency.png'
        plt.savefig(filename)
        plt.close()
        print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

        # 2. –ì—Ä–∞—Ñ—ñ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        plt.figure(figsize=(12, 6))
        for idx, db in enumerate(scenario_data["Database"].unique()):
            db_data = scenario_data[scenario_data["Database"] == db]
            db_data = db_data.sort_values("Documents")
            plt.plot(
                db_data["Documents"],
                db_data["Total Time (s)"],
                marker='o',
                label=db,
                color=colors[idx % len(colors)],
                linewidth=2
            )
        plt.title(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é: {scenario}")
        plt.xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
        plt.ylabel("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å (—Å–µ–∫—É–Ω–¥–∏)")
        plt.xscale('log', base=2)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()
        plt.tight_layout()
        filename = f'benchmark_{scenario.lower().replace(" ", "_")}_total_time.png'
        plt.savefig(filename)
        plt.close()
        print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

        # 3. –ì—Ä–∞—Ñ—ñ–∫ —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±–∞–∑ –¥–∞–Ω–∏—Ö
        plt.figure(figsize=(12, 6))
        db_data = scenario_data.groupby('Database')['Avg Operation Latency (s)'].mean()
        plt.bar(db_data.index, db_data.values, color=colors[:len(db_data)])
        plt.title(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é: {scenario}")
        plt.xlabel("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        plt.ylabel("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (—Å–µ–∫—É–Ω–¥–∏)")
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        filename = f'benchmark_{scenario.lower().replace(" ", "_")}_comparison.png'
        plt.savefig(filename)
        plt.close()
        print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    visualize_pro()
    visualize_workload()